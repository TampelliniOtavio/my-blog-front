---
import { Button, buttonVariants } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useTranslations } from "@/i18n/utils";
import Layout from "@/layouts/Layout.astro";
import { getAuth } from "@/lib/auth";
import type { TranslationKeys } from "@/i18n/ui";
import { actions } from "astro:actions";

const isAuthenticated = (await getAuth(Astro.cookies)) !== undefined;

if (isAuthenticated) {
    return Astro.redirect("/");
}

const translation = useTranslations(Astro.url);

const { t } = translation;

const result = Astro.getActionResult(actions.auth.loginUser);

if (result && !result.error) {
    return Astro.redirect(`/${translation.lang}`);
}
---

<Layout title={t("login.title")} description={t("login.description")}>
    <div
        class="grid grid-cols-1 md:grid-cols-2 grid-flow-row h-full place-items-center"
    >
        <div
            class="hidden md:block col-span-1 bg-gray-200 dark:bg-black h-full w-full"
        >
        </div>
        <div class="col-span-1 justify-center">
            <form
                method="post"
                class="flex flex-col gap-5"
                action={actions.auth.loginUser}
            >
                <Label>
                    {t("login.username.label")}
                    <Input
                        type="text"
                        name="username"
                        autoComplete="username"
                        required
                    />
                </Label>
                <Label>
                    {t("login.password.label")}
                    <Input
                        type="password"
                        name="password"
                        autoComplete="current-password"
                        required
                    />
                </Label>
                <Button type="submit">{t("login.submit-button")}</Button>
                <a href="/" class={buttonVariants({ variant: "outline" })}
                    >{t("login.cancel-button")}</a
                >
                {
                    result?.error?.message && (
                        <p class="text-red-400">
                            {t(result?.error?.message as TranslationKeys)}
                        </p>
                    )
                }
            </form>
        </div>
    </div>
</Layout>
